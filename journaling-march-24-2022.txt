Today was a bit of a lazy day today. My brain has been buzzing with all the things that we learned yesterday.  Previously we played with strings a significant amount. Today I returned to a video about APIs. I found it fascinating because it gave me a huge perspective that I lacked previously on how everything works.  APIs aren't this magic other thing, they're the methods and functions...and frameworks are the same...and libraries are the same...Conceptually all the next step stuff is the same with different and additional ways to do things that don't exist singularly.

Talk about mindblowing right? That's crazy.  Slice() and alert() and msgY.replace() and stuff like that just got expanded by others.  Having taken that in mind, the video then addressed REST APIs. That itself was another wow. I've learned previously about them but only in the sense of how to identify them (i.e. specific objects).  This video did the favor of bringing CRUD and HTML response messages to show that we target a specific thing with a specific kind of HTTP header (post,delete,whatever).  Definitely brought me full circle on that..or much closer to it. That's something I can understand. That means a lot to me for development and also clarifies security research I did in the past and what is going on for that.

Now I'm on the https://www.youtube.com/watch?v=jS4aFq5-91M JS full course video of freecodecamp.org.
Our first goal: building a passenger counter app.

The setup of HTML is as follows:
<html>
    <head>
        <link rel="stylesheet" href="index.css">
    </head>
    <body>
        <h1>People entered:</h1>
        <h2 id="count-el">0</h2>
    </body>
</html>

Seems pretty straightforward from looking at it. Breaking the code down for analysis we see it has a body with 2 elements: people entered and "count-el" 
Really people entered is what we see here with just purely the HTML.  count-el is 0 and sits below. Neither button is presented so already we have our first question:
Q1) Where are the buttons we see?

A quick look at the css without writing it all out (he shows us a screen of it) shows that he chose to do body {background-image}. This explains why we see an image of a snowy day even though we don't make any references embedded in the html. Neat.  Great way to do it, I like it.

Also present (after h1,h2) is a button {}.  Is this where our button comes from? But we don't name it as an element so how could it exist?

......Turns out we have to add a script tag...

Here is his play-by-play on the script:
document.getElementById()    ....this gets our document for our HTML. He adds in the parenthesis....the id of count-el. 
he sets .innerText = 5.  This changes our counter to 5.  So far nothing special--we did this with Vickler.  Funnily he calls embedding like this "amateurish" and says we'll create index.js  instead. 

He copies it over to the file and sets script src="index.js" to call on it.  He then rambles about how this is going to change our life forever and we'll celebrate a year from now "our first javascript variable"...except we've already been hacking away chief..

Anyways..my night-time snark aside, what he's done thus far is decided to manipulate the innertext to display 5 by citing an element by id.  We've worked with this but only ever innerHTML.

We then ask ourselves: what do we need to build this passenger counting app for a subway?

a-- a way to store the count. We can use a variable to store the data in.

let count = 0
this is his variable..he's being simple about it 

console.log(count)
This is a weird addition to me...We already have our number displayed, why the doubling with console.log?

After getting a brief explanation of how to console and also what it's for, we get assigned to create a variable myAge and set value to our age. I'm skipping because I already know how to assign variables and console.log.  I'm much more interested in what the hell we need to console.log our variable for if we're already displaying it on body.

The whole purpose of us adding myAge seems to be to teach us about reference errors and that JS reads top-down and if a variable isn't declared it freaks out. Fine. Next.

Now he's talking about using JS as a calculator...5 + 7.... 5-7 ... 5/7...5*7..oh wow..we can math...nu?

so now he adds a variable.
let firstBatch = 5
let secondBatch = 7
let count = firstBatch + secondBatch

And now we're doing math.  We have 5 in first travelers, 7 in the next, and our count is each batch.  Already I detect an overall issue: we need an undefined number of batches here. We need variables for each and every batch that comes through.

One solution to this perhaps is to set an expected normal number of batches.

Perhaps we learn later on another way to "add" batches incrementally somehow...I'm not sure how.

But he's not about that..oh no. We're going to convert our age to dog years...create 2 variables myAge and humanDogRatio  ....multiply them and put in myDogAge.
Then console it.
Just for fun to show we know how:
myAge = 35
humanDogRatio = 7
myDogAge = myAge * humanDogRatio
console.log(myDogAge)

Now we're covering if we want to change it, we simply script in count = 3 to make it 3 instead of 5.  Already knew that, it's demonstrative and what not but it's not exactly practice if you're standing in the snow counting people..I thought the whole point was to make a counter to simplify it all?

Well, after creating a few new reassignments he touches this.."What if we want to increment our count by 1?"
first proposed comment / code is count + 1 ...still not practical like this... but here is how he fleshes it out.

count = count + 1
we could increment whatever we want...he does 2,10, -2..

New challenge..Create a variable bonusPoints.  Starts at 50, increases 100, decrease 25, decrease 70.

bonusPoints = 50
bonusPoints = bonusPoints + 100
bonusPoints = bonusPoints - 25
bonusPoints = bonusPoints - 70
console.log(bonusPoints)

This is how I chose to do it..Still feels inefficient in some way.

Now we're getting to interface..hurray..We'll make our buttons.

Instructions: create INCREMENT button with id = "increment-btn"

<button id = "increment-btn">INCREMENT</button>

This of course is very good and works well except that our button isn't styled like his is. He gave it border,padding-top,padding-bottom,color,font-weight,width, margin-bottom, border-radius...  all out.

Because this was a button {} he has styled (and it'll cascade downward) onto the button elements of the page.

There is #increment-btn which has additional background added to make it darkred;  

At this point it's time for bed..this has been enough to think on. We'll continue tomorrow.


