Good morning. Today we're going through a JS 1 hour tutorial with "Programming with Mosh". The details can be found in the new repo withmosh  .  He includes node.js which we have not yet worked with. 

The first relevant/new information is something that he says around the 12m mark.  "Separation of Concerns"..  This is the first time I've heard the phrase used.  I have seen what he mentioned before about embedding code vs putting it in different files but never with an official name.  Similarly I have seen him include things like head vs body and where in body.

The previous understanding I had was that placement didn't matter but that it was considered amateurish to do a script embedded.

It's interesting that he says putting it at the bottom helps everything to render better. If it were all at the top and then the elements wouldn't it be the same because the computer would already be awared to the existence of the things?  Anyway, I think from now on I will attempt to adopt this.

Wow...and just like that we're using Node by "node index1.js"
We have now used node to execute js code. That in itself is pretty cool. Up til now I've just loaded the page in  browser to see it work.

What is neat about it is the fact that I'm able to just see calculations and stuff like console without having to load up devtools.

"What values can we assign?"
Primitives/ Value Types -- strings, numbers, booleans, undefined, null

Dynamic Language
2 types...Static or Dynamic.
Static : When setting a variable, type is set and cannot be changed in the future. So string name = 'john';
Dynamic: let name = 'John';   this can change at runtime
see index5.js 
undefined is a type AND a value. It's type will be undefined and it's value.
The type of selectedColor is an object...even though it's value is null.

Reference Types 
Objects, arrays, functions

Object: It's like an object in real life. A person has age, name, address, etc.  Same concept in JS.  When working with multiple related variables we can put them in the object.

Instead of declaring 2 variables, we can declare person object and reference it.

To do that, we use let/const.
let person = {} 
{} are "object literal"
Between them we add "key value pairs.

see index6.js 

This is actually quite interesting and amazing. We are able to assign a whole bunch of what would be variables....in a single go.   If we know ahead of time we can just create objects and give them those values and spare having to rewrite a bunch of variables per thing.

name, age are properties and the info in them is what makes them value pairs.

There are 2 ways to work with the properties. If we wanted to change, say, the name... We need to access the name property.

"Dot notation"
person.name = 'John'

We can also call on it to see it.
console.log(person.name);

"Bracket Notation"
person['name'] = 'Mary';

"Which is better?"
Dot is more concise and should be default.
When we don't know what property, we're going to have a variable like "selection = 'name';" 
With this we can dynamically do this:
person[selection] = 'Mary';

Basically by making it be a variable, we can hook that other variable up to something and when it receives it's value, it transfers the value to the object because they share that value.

"Arrays"
Sometimes we might deal with a list of objects. Say a list of products in shopping cart or list of colors selected. We can store in an array.

We can declare an array by creating a variable.
let selectedColors = ['red','blue'];

The array literal is the [] empty.
Each item in it has an index...so if we console log, it'll return us the index and the contents.
see index7.js .

We console.log the 1 (2nd index) and it returns our value (blue).
He adds another element (green).
In JavaScript we can store different types in an array.
so a change of selectedColors = 1;  will have an array ['red','blue',1]

Arrays are objects in JS.  We can see properties in dot notation.

console.log(selectedColors.);    offers us a huge list of "inherited properties".
We could use .length to see how long it is.

"Functions"
A set of statements that performs a task or calculates a value.
declare by function keyword
function greet() {}
Inside the {} is the "body of the function". These are all the logical statements in our application.
So our logic is to display message to console.

function greet() {
    console.log('Hello World');
}

Our functions can have inputs, which change how they behave.
If we want to display name of the person we can add a variable in the (). This is a parameter.  The function now has parameter name.
function greet(name) {
    console.log('Hello' + name);
    }
We can see the results in index9.js .  In greet('John'); we would be creating an "argument" (John) and passing it to the next part which is our name parameter.

This confuses many programmers.  A parameter is what we have in the () at time of declaration but argument is what we supply later for that.

We can add multiple parameters to functions as well.
function greet(name, lastName) {
    console.log('Hello ' + name + ' ' + lastName);
}

When we call it, we should pass with all needed arguments.  For now if we use greet('John') and greet('Mary') it'll produce those with "undefined" for second.  By default no assignment does that.

If we do greet('John','Smith') our output is "Hello John Smith".

Function pt 2
Our prior function is performing a task.  Sometimes there might be a calculation of a value.

function square(number) {
    number * number;
}
We need to return the value...so we should use return keyword
function square(number) {
    return number * number;
}

This means square(2); will square it
Or we can do something else...

let number = square(2);
console.log(number);

This shows square of 2. We could also just pass to console.log
console.log(suqare(2));

To end the video Mosh tells us all about the function console.log being itself a function. We can pass values to it and see it happen..We can pass functions to it too..

Big picture programming is about 100s or 1000s of functions in sync working toward an end result goal.