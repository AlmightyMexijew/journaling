Good morning. Today we're going through a JS 1 hour tutorial with "Programming with Mosh". The details can be found in the new repo withmosh  .  He includes node.js which we have not yet worked with. 

The first relevant/new information is something that he says around the 12m mark.  "Separation of Concerns"..  This is the first time I've heard the phrase used.  I have seen what he mentioned before about embedding code vs putting it in different files but never with an official name.  Similarly I have seen him include things like head vs body and where in body.

The previous understanding I had was that placement didn't matter but that it was considered amateurish to do a script embedded.

It's interesting that he says putting it at the bottom helps everything to render better. If it were all at the top and then the elements wouldn't it be the same because the computer would already be awared to the existence of the things?  Anyway, I think from now on I will attempt to adopt this.

Wow...and just like that we're using Node by "node index1.js"
We have now used node to execute js code. That in itself is pretty cool. Up til now I've just loaded the page in  browser to see it work.

What is neat about it is the fact that I'm able to just see calculations and stuff like console without having to load up devtools.

"What values can we assign?"
Primitives/ Value Types -- strings, numbers, booleans, undefined, null

Dynamic Language
2 types...Static or Dynamic.
Static : When setting a variable, type is set and cannot be changed in the future. So string name = 'john';
Dynamic: let name = 'John';   this can change at runtime
see index5.js 
undefined is a type AND a value. It's type will be undefined and it's value.
The type of selectedColor is an object...even though it's value is null.

Reference Types 
Objects, arrays, functions

Object: It's like an object in real life. A person has age, name, address, etc.  Same concept in JS.  When working with multiple related variables we can put them in the object.

Instead of declaring 2 variables, we can declare person object and reference it.

To do that, we use let/const.
let person = {} 
{} are "object literal"
Between them we add "key value pairs.

see index6.js 

This is actually quite interesting and amazing. We are able to assign a whole bunch of what would be variables....in a single go.   If we know ahead of time we can just create objects and give them those values and spare having to rewrite a bunch of variables per thing.